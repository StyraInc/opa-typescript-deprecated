/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "./models/components/index.js";
import * as errors from "./models/errors/index.js";
import * as operations from "./models/operations/index.js";

export class OpaApiClient extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Execute the default decision  given an input
     */
    async executeDefaultPolicyWithInput(
        input: components.Input,
        pretty?: boolean | undefined,
        acceptEncoding?: components.GzipAcceptEncoding | undefined,
        options?: RequestOptions
    ): Promise<operations.ExecuteDefaultPolicyWithInputResponse> {
        const input$: operations.ExecuteDefaultPolicyWithInputRequest = {
            pretty: pretty,
            acceptEncoding: acceptEncoding,
            input: input,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.ExecuteDefaultPolicyWithInputRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.input, { explode: true });

        const path$ = this.templateURLComponent("/")();

        const query$ = encodeFormQuery$({
            pretty: payload$.pretty,
        });

        headers$.set(
            "Accept-Encoding",
            encodeSimple$("Accept-Encoding", payload$["Accept-Encoding"], {
                explode: false,
                charEncoding: "none",
            })
        );
        const context = {
            operationID: "executeDefaultPolicyWithInput",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const doOptions = { context, errorCodes: ["400", "404", "4XX", "500", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "POST", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.ExecuteDefaultPolicyWithInputResponse>()
            .json(200, operations.ExecuteDefaultPolicyWithInputResponse$, {
                hdrs: true,
                key: "result",
            })
            .json([400, 404], errors.ClientError$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.ServerError$, { err: true })
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Execute a policy
     */
    async executePolicy(
        request: operations.ExecutePolicyRequest,
        options?: RequestOptions
    ): Promise<operations.ExecutePolicyResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ExecutePolicyRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            path: encodeSimple$("path", payload$.path, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/v1/data/{path}")(pathParams$);

        const query$ = encodeFormQuery$({
            explain: payload$.explain,
            instrument: payload$.instrument,
            metrics: payload$.metrics,
            pretty: payload$.pretty,
            provenance: payload$.provenance,
            "strict-builtin-errors": payload$["strict-builtin-errors"],
        });

        headers$.set(
            "Accept-Encoding",
            encodeSimple$("Accept-Encoding", payload$["Accept-Encoding"], {
                explode: false,
                charEncoding: "none",
            })
        );
        const context = { operationID: "executePolicy", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["400", "4XX", "500", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.ExecutePolicyResponse>()
            .json(200, operations.ExecutePolicyResponse$, {
                hdrs: true,
                key: "SuccessfulPolicyResponse",
            })
            .json(400, errors.ClientError$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.ServerError$, { err: true })
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Execute a policy given an input
     */
    async executePolicyWithInput(
        request: operations.ExecutePolicyWithInputRequest,
        options?: RequestOptions
    ): Promise<operations.ExecutePolicyWithInputResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ExecutePolicyWithInputRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            path: encodeSimple$("path", payload$.path, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/v1/data/{path}")(pathParams$);

        const query$ = encodeFormQuery$({
            explain: payload$.explain,
            instrument: payload$.instrument,
            metrics: payload$.metrics,
            pretty: payload$.pretty,
            provenance: payload$.provenance,
            "strict-builtin-errors": payload$["strict-builtin-errors"],
        });

        headers$.set(
            "Accept-Encoding",
            encodeSimple$("Accept-Encoding", payload$["Accept-Encoding"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Content-Encoding",
            encodeSimple$("Content-Encoding", payload$["Content-Encoding"], {
                explode: false,
                charEncoding: "none",
            })
        );
        const context = {
            operationID: "executePolicyWithInput",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const doOptions = { context, errorCodes: ["400", "4XX", "500", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "POST", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.ExecutePolicyWithInputResponse>()
            .json(200, operations.ExecutePolicyWithInputResponse$, {
                hdrs: true,
                key: "SuccessfulPolicyResponse",
            })
            .json(400, errors.ClientError$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.ServerError$, { err: true })
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Execute a policy given a batch of inputs
     */
    async executeBatchPolicyWithInput(
        request: operations.ExecuteBatchPolicyWithInputRequest,
        options?: RequestOptions
    ): Promise<operations.ExecuteBatchPolicyWithInputResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ExecuteBatchPolicyWithInputRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            path: encodeSimple$("path", payload$.path, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/v1/batch/data/{path}")(pathParams$);

        const query$ = encodeFormQuery$({
            explain: payload$.explain,
            instrument: payload$.instrument,
            metrics: payload$.metrics,
            pretty: payload$.pretty,
            provenance: payload$.provenance,
            "strict-builtin-errors": payload$["strict-builtin-errors"],
        });

        headers$.set(
            "Accept-Encoding",
            encodeSimple$("Accept-Encoding", payload$["Accept-Encoding"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Content-Encoding",
            encodeSimple$("Content-Encoding", payload$["Content-Encoding"], {
                explode: false,
                charEncoding: "none",
            })
        );
        const context = {
            operationID: "executeBatchPolicyWithInput",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const doOptions = { context, errorCodes: ["400", "4XX", "500", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "POST", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.ExecuteBatchPolicyWithInputResponse>()
            .json(200, operations.ExecuteBatchPolicyWithInputResponse$, {
                hdrs: true,
                key: "BatchSuccessfulPolicyEvaluation",
            })
            .json(207, operations.ExecuteBatchPolicyWithInputResponse$, {
                hdrs: true,
                key: "BatchMixedResults",
            })
            .json(400, errors.ClientError$, { err: true })
            .fail(["4XX", "5XX"])
            .json(500, errors.BatchServerError$, { err: true })
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Verify the server is operational
     *
     * @remarks
     * The health API endpoint executes a simple built-in policy query to verify that the server is operational. Optionally it can account for bundle activation as well (useful for “ready” checks at startup).
     */
    async health(
        bundles?: boolean | undefined,
        plugins?: boolean | undefined,
        excludePlugin?: Array<string> | undefined,
        options?: RequestOptions
    ): Promise<operations.HealthResponse> {
        const input$: operations.HealthRequest = {
            bundles: bundles,
            plugins: plugins,
            excludePlugin: excludePlugin,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.HealthRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/health")();

        const query$ = encodeFormQuery$({
            bundles: payload$.bundles,
            "exclude-plugin": payload$["exclude-plugin"],
            plugins: payload$.plugins,
        });

        const context = { operationID: "health", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["4XX", "500", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.HealthResponse>()
            .json(200, operations.HealthResponse$, { key: "HealthyServer" })
            .fail(["4XX", "5XX"])
            .json(500, errors.UnhealthyServer$, { err: true })
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }
}
