/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "./models/errors";
import * as operations from "./models/operations";

export class OpaApiClient extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Execute a policy
     */
    async executePolicy(
        request: operations.ExecutePolicyRequest,
        options?: RequestOptions
    ): Promise<operations.ExecutePolicyResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ExecutePolicyRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            path: enc$.encodeSimple("path", payload$.path, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/data/{path}")(pathParams$);

        const query$ = [
            enc$.encodeForm("explain", payload$.explain, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("instrument", payload$.instrument, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("metrics", payload$.metrics, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("pretty", payload$.pretty, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("provenance", payload$.provenance, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("strict-builtin-errors", payload$["strict-builtin-errors"], {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "Accept-Encoding",
            enc$.encodeSimple("Accept-Encoding", payload$["Accept-Encoding"], {
                explode: false,
                charEncoding: "none",
            })
        );
        const context = { operationID: "executePolicy", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["400", "4XX", "500", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: {
                Response: response,
                Request: request$,
            },
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.ExecutePolicyResponse$.inboundSchema.parse({
                        ...responseFields$,
                        Headers: this.unpackHeaders(response.headers),
                        SuccessfulPolicyEvaluation: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return errors.ClientError$.inboundSchema.parse({
                        ...responseFields$,
                        ...val$,
                    });
                },
                "Response validation failed"
            );
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return errors.ServerError$.inboundSchema.parse({
                        ...responseFields$,
                        ...val$,
                    });
                },
                "Response validation failed"
            );
            throw result;
        } else {
            throw new errors.SDKError("Unexpected API response status or content-type", {
                response,
                request: request$,
            });
        }
    }

    /**
     * Execute a policy given an input
     */
    async executePolicyWithInput(
        request: operations.ExecutePolicyWithInputRequest,
        options?: RequestOptions
    ): Promise<operations.ExecutePolicyWithInputResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ExecutePolicyWithInputRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            path: enc$.encodeSimple("path", payload$.path, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/data/{path}")(pathParams$);

        const query$ = [
            enc$.encodeForm("explain", payload$.explain, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("instrument", payload$.instrument, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("metrics", payload$.metrics, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("pretty", payload$.pretty, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("provenance", payload$.provenance, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("strict-builtin-errors", payload$["strict-builtin-errors"], {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "Accept-Encoding",
            enc$.encodeSimple("Accept-Encoding", payload$["Accept-Encoding"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "Content-Encoding",
            enc$.encodeSimple("Content-Encoding", payload$["Content-Encoding"], {
                explode: false,
                charEncoding: "none",
            })
        );
        const context = {
            operationID: "executePolicyWithInput",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const doOptions = { context, errorCodes: ["400", "4XX", "500", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "POST", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: {
                Response: response,
                Request: request$,
            },
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.ExecutePolicyWithInputResponse$.inboundSchema.parse({
                        ...responseFields$,
                        Headers: this.unpackHeaders(response.headers),
                        SuccessfulPolicyEvaluation: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return errors.ClientError$.inboundSchema.parse({
                        ...responseFields$,
                        ...val$,
                    });
                },
                "Response validation failed"
            );
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return errors.ServerError$.inboundSchema.parse({
                        ...responseFields$,
                        ...val$,
                    });
                },
                "Response validation failed"
            );
            throw result;
        } else {
            throw new errors.SDKError("Unexpected API response status or content-type", {
                response,
                request: request$,
            });
        }
    }

    /**
     * Verify the server is operational
     *
     * @remarks
     * The health API endpoint executes a simple built-in policy query to verify that the server is operational. Optionally it can account for bundle activation as well (useful for “ready” checks at startup).
     */
    async health(
        bundles?: boolean | undefined,
        plugins?: boolean | undefined,
        excludePlugin?: Array<string> | undefined,
        options?: RequestOptions
    ): Promise<operations.HealthResponse> {
        const input$: operations.HealthRequest = {
            bundles: bundles,
            plugins: plugins,
            excludePlugin: excludePlugin,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.HealthRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/health")();

        const query$ = [
            enc$.encodeForm("bundles", payload$.bundles, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("exclude-plugin", payload$["exclude-plugin"], {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("plugins", payload$.plugins, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const context = { operationID: "health", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["4XX", "500", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: {
                Response: response,
                Request: request$,
            },
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.HealthResponse$.inboundSchema.parse({
                        ...responseFields$,
                        HealthyServer: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return errors.UnhealthyServer$.inboundSchema.parse({
                        ...responseFields$,
                        ...val$,
                    });
                },
                "Response validation failed"
            );
            throw result;
        } else {
            throw new errors.SDKError("Unexpected API response status or content-type", {
                response,
                request: request$,
            });
        }
    }
}
