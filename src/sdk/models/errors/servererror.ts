/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type ServerErrorLocation = {
    file: string;
    row: number;
    col: number;
};

export type ServerErrorErrors = {
    code: string;
    message: string;
    location?: ServerErrorLocation | undefined;
};

/**
 * Server Error
 */
export type ServerErrorData = {
    code: string;
    message: string;
    errors?: Array<ServerErrorErrors> | undefined;
    decisionId?: string | undefined;
};

/**
 * Server Error
 */
export class ServerError extends Error {
    code: string;
    errors?: Array<ServerErrorErrors> | undefined;
    decisionId?: string | undefined;

    /** The original data that was passed to this error instance. */
    data$: ServerErrorData;

    constructor(err: ServerErrorData) {
        super("");
        this.data$ = err;

        this.code = err.code;
        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.decisionId != null) {
            this.decisionId = err.decisionId;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ServerError";
    }
}

/** @internal */
export namespace ServerErrorLocation$ {
    export const inboundSchema: z.ZodType<ServerErrorLocation, z.ZodTypeDef, unknown> = z.object({
        file: z.string(),
        row: z.number().int(),
        col: z.number().int(),
    });

    export type Outbound = {
        file: string;
        row: number;
        col: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ServerErrorLocation> = z.object({
        file: z.string(),
        row: z.number().int(),
        col: z.number().int(),
    });
}

/** @internal */
export namespace ServerErrorErrors$ {
    export const inboundSchema: z.ZodType<ServerErrorErrors, z.ZodTypeDef, unknown> = z.object({
        code: z.string(),
        message: z.string(),
        location: z.lazy(() => ServerErrorLocation$.inboundSchema).optional(),
    });

    export type Outbound = {
        code: string;
        message: string;
        location?: ServerErrorLocation$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ServerErrorErrors> = z.object({
        code: z.string(),
        message: z.string(),
        location: z.lazy(() => ServerErrorLocation$.outboundSchema).optional(),
    });
}

/** @internal */
export namespace ServerError$ {
    export const inboundSchema: z.ZodType<ServerError, z.ZodTypeDef, unknown> = z
        .object({
            code: z.string(),
            message: z.string(),
            errors: z.array(z.lazy(() => ServerErrorErrors$.inboundSchema)).optional(),
            decision_id: z.string().optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                decision_id: "decisionId",
            });

            return new ServerError(remapped);
        });

    export type Outbound = {
        code: string;
        message: string;
        errors?: Array<ServerErrorErrors$.Outbound> | undefined;
        decision_id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ServerError> = z
        .instanceof(ServerError)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    code: z.string(),
                    message: z.string(),
                    errors: z.array(z.lazy(() => ServerErrorErrors$.outboundSchema)).optional(),
                    decisionId: z.string().optional(),
                })
                .transform((v) => {
                    return remap$(v, {
                        decisionId: "decision_id",
                    });
                })
        );
}
