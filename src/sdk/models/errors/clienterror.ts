/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Location = {
    col: number;
    file: string;
    row: number;
};

export type Errors = {
    code: string;
    location?: Location | undefined;
    message: string;
};

/**
 * Bad Request
 */
export type ClientErrorData = {
    code: string;
    errors?: Array<Errors> | undefined;
    message: string;
};

/**
 * Bad Request
 */
export class ClientError extends Error {
    code: string;
    errors?: Array<Errors> | undefined;

    /** The original data that was passed to this error instance. */
    data$: ClientErrorData;

    constructor(err: ClientErrorData) {
        super("");
        this.data$ = err;

        this.code = err.code;
        if (err.errors != null) {
            this.errors = err.errors;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ClientError";
    }
}

/** @internal */
export namespace Location$ {
    export const inboundSchema: z.ZodType<Location, z.ZodTypeDef, unknown> = z.object({
        col: z.number().int(),
        file: z.string(),
        row: z.number().int(),
    });

    export type Outbound = {
        col: number;
        file: string;
        row: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Location> = z.object({
        col: z.number().int(),
        file: z.string(),
        row: z.number().int(),
    });
}

/** @internal */
export namespace Errors$ {
    export const inboundSchema: z.ZodType<Errors, z.ZodTypeDef, unknown> = z.object({
        code: z.string(),
        location: z.lazy(() => Location$.inboundSchema).optional(),
        message: z.string(),
    });

    export type Outbound = {
        code: string;
        location?: Location$.Outbound | undefined;
        message: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Errors> = z.object({
        code: z.string(),
        location: z.lazy(() => Location$.outboundSchema).optional(),
        message: z.string(),
    });
}

/** @internal */
export namespace ClientError$ {
    export const inboundSchema: z.ZodType<ClientError, z.ZodTypeDef, unknown> = z
        .object({
            code: z.string(),
            errors: z.array(z.lazy(() => Errors$.inboundSchema)).optional(),
            message: z.string(),
        })
        .transform((v) => {
            return new ClientError(v);
        });

    export type Outbound = {
        code: string;
        errors?: Array<Errors$.Outbound> | undefined;
        message: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ClientError> = z
        .instanceof(ClientError)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                code: z.string(),
                errors: z.array(z.lazy(() => Errors$.outboundSchema)).optional(),
                message: z.string(),
            })
        );
}
