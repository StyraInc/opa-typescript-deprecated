/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import { SuccessfulPolicyResponse, SuccessfulPolicyResponse$ } from "./successfulpolicyresponse";
import * as z from "zod";

export type BatchSuccessfulPolicyEvaluation = {
    batchDecisionId?: string | undefined;
    /**
     * If query metrics are enabled, this field contains query performance metrics collected during the parse, compile, and evaluation steps.
     */
    metrics?: { [k: string]: any } | undefined;
    responses?: { [k: string]: SuccessfulPolicyResponse } | undefined;
};

/** @internal */
export namespace BatchSuccessfulPolicyEvaluation$ {
    export const inboundSchema: z.ZodType<BatchSuccessfulPolicyEvaluation, z.ZodTypeDef, unknown> =
        z
            .object({
                batch_decision_id: z.string().optional(),
                metrics: z.record(z.any()).optional(),
                responses: z.record(SuccessfulPolicyResponse$.inboundSchema).optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    batch_decision_id: "batchDecisionId",
                });
            });

    export type Outbound = {
        batch_decision_id?: string | undefined;
        metrics?: { [k: string]: any } | undefined;
        responses?: { [k: string]: SuccessfulPolicyResponse$.Outbound } | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        BatchSuccessfulPolicyEvaluation
    > = z
        .object({
            batchDecisionId: z.string().optional(),
            metrics: z.record(z.any()).optional(),
            responses: z.record(SuccessfulPolicyResponse$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                batchDecisionId: "batch_decision_id",
            });
        });
}
