/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type HealthRequest = {
    /**
     * Boolean parameter to account for bundle activation status in response. This includes any discovery bundles or bundles defined in the loaded discovery configuration.
     */
    bundles?: boolean | undefined;
    /**
     * Boolean parameter to account for plugin status in response.
     */
    plugins?: boolean | undefined;
    /**
     * String parameter to exclude a plugin from status checks. Can be added multiple times. Does nothing if plugins is not true. This parameter is useful for special use cases where a plugin depends on the server being fully initialized before it can fully initialize itself.
     */
    excludePlugin?: Array<string> | undefined;
};

export type HealthResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OPA service is healthy. If the bundles option is specified then all configured bundles have been activated. If the plugins option is specified then all plugins are in an OK state.
     */
    healthyServer?: components.HealthyServer | undefined;
};

/** @internal */
export namespace HealthRequest$ {
    export type Inbound = {
        bundles?: boolean | undefined;
        plugins?: boolean | undefined;
        "exclude-plugin"?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<HealthRequest, z.ZodTypeDef, Inbound> = z
        .object({
            bundles: z.boolean().default(false),
            plugins: z.boolean().default(false),
            "exclude-plugin": z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                bundles: v.bundles,
                plugins: v.plugins,
                ...(v["exclude-plugin"] === undefined
                    ? null
                    : { excludePlugin: v["exclude-plugin"] }),
            };
        });

    export type Outbound = {
        bundles: boolean;
        plugins: boolean;
        "exclude-plugin"?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HealthRequest> = z
        .object({
            bundles: z.boolean().default(false),
            plugins: z.boolean().default(false),
            excludePlugin: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                bundles: v.bundles,
                plugins: v.plugins,
                ...(v.excludePlugin === undefined ? null : { "exclude-plugin": v.excludePlugin }),
            };
        });
}

/** @internal */
export namespace HealthResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        HealthyServer?: components.HealthyServer$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<HealthResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            HealthyServer: components.HealthyServer$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.HealthyServer === undefined ? null : { healthyServer: v.HealthyServer }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        HealthyServer?: components.HealthyServer$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HealthResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            healthyServer: components.HealthyServer$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.healthyServer === undefined ? null : { HealthyServer: v.healthyServer }),
            };
        });
}
