/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ServerErrorLocation = {
    file: string;
    row: number;
    col: number;
};

export type ServerErrorErrors = {
    code: string;
    message: string;
    location?: ServerErrorLocation | undefined;
};

/**
 * Server Error
 */
export type ServerErrorData = {
    code: string;
    message: string;
    errors?: Array<ServerErrorErrors> | undefined;
};

/**
 * Server Error
 */
export class ServerError extends Error {
    code: string;
    errors?: Array<ServerErrorErrors> | undefined;

    /** The original data that was passed to this error instance. */
    data$: ServerErrorData;

    constructor(err: ServerErrorData) {
        super("");
        this.data$ = err;

        this.code = err.code;
        if (err.errors != null) {
            this.errors = err.errors;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ServerError";
    }
}

/** @internal */
export namespace ServerErrorLocation$ {
    export type Inbound = {
        file: string;
        row: number;
        col: number;
    };

    export const inboundSchema: z.ZodType<ServerErrorLocation, z.ZodTypeDef, Inbound> = z
        .object({
            file: z.string(),
            row: z.number().int(),
            col: z.number().int(),
        })
        .transform((v) => {
            return {
                file: v.file,
                row: v.row,
                col: v.col,
            };
        });

    export type Outbound = {
        file: string;
        row: number;
        col: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ServerErrorLocation> = z
        .object({
            file: z.string(),
            row: z.number().int(),
            col: z.number().int(),
        })
        .transform((v) => {
            return {
                file: v.file,
                row: v.row,
                col: v.col,
            };
        });
}

/** @internal */
export namespace ServerErrorErrors$ {
    export type Inbound = {
        code: string;
        message: string;
        location?: ServerErrorLocation$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ServerErrorErrors, z.ZodTypeDef, Inbound> = z
        .object({
            code: z.string(),
            message: z.string(),
            location: z.lazy(() => ServerErrorLocation$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.location === undefined ? null : { location: v.location }),
            };
        });

    export type Outbound = {
        code: string;
        message: string;
        location?: ServerErrorLocation$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ServerErrorErrors> = z
        .object({
            code: z.string(),
            message: z.string(),
            location: z.lazy(() => ServerErrorLocation$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.location === undefined ? null : { location: v.location }),
            };
        });
}

/** @internal */
export namespace ServerError$ {
    export type Inbound = {
        code: string;
        message: string;
        errors?: Array<ServerErrorErrors$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ServerError, z.ZodTypeDef, Inbound> = z
        .object({
            code: z.string(),
            message: z.string(),
            errors: z.array(z.lazy(() => ServerErrorErrors$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return new ServerError({
                code: v.code,
                message: v.message,
                ...(v.errors === undefined ? null : { errors: v.errors }),
            });
        });
    export type Outbound = {
        code: string;
        message: string;
        errors?: Array<ServerErrorErrors$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ServerError> = z
        .instanceof(ServerError)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    code: z.string(),
                    message: z.string(),
                    errors: z.array(z.lazy(() => ServerErrorErrors$.outboundSchema)).optional(),
                })
                .transform((v) => {
                    return {
                        code: v.code,
                        message: v.message,
                        ...(v.errors === undefined ? null : { errors: v.errors }),
                    };
                })
        );
}
